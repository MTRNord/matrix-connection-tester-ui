/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/alerts/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["list_alerts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/alerts/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["register_alert"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/alerts/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["verify_alert"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/alerts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["delete_alert"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/federation/federation-ok": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_fed_ok"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/federation/report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_report"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/healthz": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["health"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head: operations["health"];
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Certificate: {
            DNSNames?: string[] | null;
            IssuerCommonName: string;
            SHA256Fingerprint: string;
            SubjectCommonName: string;
        };
        Checks: {
            AllChecksOK: boolean;
            AllEd25519ChecksOK: boolean;
            Ed25519Checks?: {
                [key: string]: components["schemas"]["Ed25519Check"];
            };
            FutureValidUntilTS: boolean;
            HasEd25519Key: boolean;
            MatchingServerName: boolean;
            ServerVersionParses: boolean;
            ValidCertificates: boolean;
        };
        Cipher: {
            CipherSuite: string;
            Version: string;
        };
        ConnectionReportData: {
            Certificates?: components["schemas"]["Certificate"][];
            Checks: components["schemas"]["Checks"];
            Cipher: components["schemas"]["Cipher"];
            Ed25519VerifyKeys: {
                [key: string]: string;
            };
            Error?: null | components["schemas"]["Error"];
            Keys: components["schemas"]["Keys"];
            Version: components["schemas"]["Version"];
        };
        Dnsresult: {
            Addrs?: string[];
            SRVSkipped: boolean;
            SrvTargets?: {
                [key: string]: components["schemas"]["SRVData"][];
            };
        };
        Ed25519Check: {
            MatchingSignature: boolean;
            ValidEd25519: boolean;
        };
        Ed25519VerifyKey: {
            /** Format: int64 */
            expired_ts?: number | null;
            key: string;
        };
        Error: {
            Error: string;
            ErrorCode: components["schemas"]["ErrorCode"];
        };
        ErrorCode: "Unknown" | "NoAddressesFound" | "SRVPointsToCNAME" | "DNSLookupTimeout" | "SRVLookupTimeout" | {
            InvalidServerName: components["schemas"]["InvalidServerNameErrorCode"];
        } | "NoRecordsFound" | {
            UnexpectedContentType: string;
        } | "MissingContentType" | {
            InvalidJson: string;
        } | {
            NotOk: string;
        } | "NoResponse" | "Timeout";
        /** @enum {string} */
        InvalidServerNameErrorCode: "Unknown" | "EmptyString" | "EmptyHostname" | "NotValidDNS" | "InvalidCharacter";
        Keys: {
            old_verify_keys?: {
                [key: string]: components["schemas"]["Ed25519VerifyKey"];
            } | null;
            server_name: string;
            signatures?: {
                [key: string]: {
                    [key: string]: string;
                };
            };
            /** Format: int64 */
            valid_until_ts: number;
            verify_keys?: {
                [key: string]: components["schemas"]["Ed25519VerifyKey"];
            };
        };
        RegisterAlert: {
            email: string;
            server_name: string;
        };
        Root: {
            ConnectionErrors?: {
                [key: string]: components["schemas"]["Error"];
            };
            ConnectionReports?: {
                [key: string]: components["schemas"]["ConnectionReportData"];
            };
            DNSResult: components["schemas"]["Dnsresult"];
            Error?: null | components["schemas"]["Error"];
            FederationOK: boolean;
            Version: components["schemas"]["Version"];
            WellKnownResult: {
                [key: string]: components["schemas"]["WellKnownResult"];
            };
        };
        SRVData: {
            Addrs?: string[];
            Error?: null | components["schemas"]["Error"];
            /** Format: int32 */
            Port: number;
            /** Format: int32 */
            Priority?: number | null;
            Target: string;
            /** Format: int32 */
            Weight?: number | null;
        };
        Version: {
            name: string;
            version: string;
        };
        WellKnownResult: {
            /** Format: int64 */
            CacheExpiresAt: number;
            Error?: null | components["schemas"]["Error"];
            "m.server": string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    list_alerts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of alerts for the email */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized - invalid or missing token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    register_alert: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterAlert"];
            };
        };
        responses: {
            /** @description Verification email sent */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "verification email sent"
                     *     } */
                    "application/json": unknown;
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    verify_alert: {
        parameters: {
            query: {
                token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Email verified successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": unknown;
                };
            };
            /** @description Invalid or expired token */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": unknown;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": unknown;
                };
            };
        };
    };
    delete_alert: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Alert deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized - invalid or missing token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Alert not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_fed_ok: {
        parameters: {
            query: {
                server_name: string;
                /** @description Skip cache and force fresh requests - useful for debugging */
                no_cache?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns 'GOOD' if federation is ok, 'BAD' otherwise */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example GOOD */
                    "text/plain": string;
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_report: {
        parameters: {
            query: {
                server_name: string;
                /** @description Skip cache and force fresh requests - useful for debugging */
                no_cache?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description JSON report of the federation test */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Root"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    health: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    health: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
}
